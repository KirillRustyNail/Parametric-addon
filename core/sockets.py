# cadquery_parametric_addon/core/sockets.py
import bpy
from bpy.props import (
    StringProperty, FloatProperty, FloatVectorProperty, BoolProperty,
    IntProperty
)
from bpy.types import NodeSocket
import time # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
import logging # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä

from .data_cache import sv_get_socket, sv_set_socket, sv_forget_socket
from ..dependencies import cq # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç cq –∏–∑ dependencies
from mathutils import Vector, Color, Euler, Quaternion 

logger = logging.getLogger(__name__) # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä

# # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
# def socket_value_update(self, context):
#     """Callback for socket default properties. Updates linked node property and triggers node processing."""
#     if not self.node: return

#     # --- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ —Å–≤–æ–π—Å—Ç–≤–æ–º –Ω–æ–¥—ã ---
#     prop_name_val = getattr(self, 'prop_name', None) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π getattr
#     if prop_name_val and hasattr(self.node, prop_name_val):
#         try:
#             current_socket_val = self.default_property
#             value_to_set = current_socket_val
#             if isinstance(current_socket_val, (bpy.types.bpy_prop_array, Vector, Color, Euler, Quaternion)):
#                  value_to_set = tuple(current_socket_val)

#             logger.info("üòé");
#             logger.info(f"socket_value_update: Setting node '{self.node.name}' property '{prop_name_val}' to {value_to_set}")
#             setattr(self.node, prop_name_val, value_to_set)
#             # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ setattr ---
#             actual_node_value = getattr(self.node, prop_name_val)
#             logger.info(f"socket_value_update: Verified node property '{prop_name_val}' is now: {actual_node_value}")
#             # ------------------------------------
#         except Exception as e:
#             logger.error(f"Failed to set node property '{prop_name_val}' from socket '{self.name}': {e}", exc_info=True) # –î–æ–±–∞–≤–∏–º exc_info

def socket_value_update(self, context):
    """Callback for socket default properties. Updates linked node property and triggers node processing."""
    if not self.node: return

    prop_name_val = getattr(self, 'prop_name', None)
    if prop_name_val and hasattr(self.node, prop_name_val):
        try:
            current_socket_val = self.default_property # –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ UI —Å–æ–∫–µ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å float)
            value_to_set = current_socket_val

            # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –û–ñ–ò–î–ê–ï–ú–´–ô —Ç–∏–ø —Å–≤–æ–π—Å—Ç–≤–∞ –ù–û–î–´ ---
            node_prop_rna = self.node.bl_rna.properties.get(prop_name_val)
            expected_node_prop_type = None
            if node_prop_rna:
                expected_node_prop_type = node_prop_rna.type # 'INT', 'FLOAT', 'BOOL', 'FLOAT_VECTOR', etc.

            # --- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¢–ò–ü–ê –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –≤ —Å–≤–æ–π—Å—Ç–≤–æ –ù–û–î–´ ---
            if expected_node_prop_type == 'INT':
                # –ï—Å–ª–∏ –Ω–æ–¥–∞ –æ–∂–∏–¥–∞–µ—Ç int, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–æ–∫–µ—Ç–∞ (–∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å float)
                try:
                    # –û–∫—Ä—É–≥–ª—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
                    value_to_set = int(round(current_socket_val))
                    # logger.debug(f"  Converted socket value {current_socket_val} to int: {value_to_set} for node prop '{prop_name_val}'")
                except (ValueError, TypeError):
                     logger.warning(f"  Could not convert socket value {current_socket_val} to int for node prop '{prop_name_val}'. Using original.")
                     # –û—Å—Ç–∞–≤–ª—è–µ–º value_to_set –∫–∞–∫ –µ—Å—Ç—å, setattr –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º
            elif expected_node_prop_type == 'FLOAT_VECTOR' and isinstance(current_socket_val, (tuple, list, Vector)):
                 # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ tuple –¥–ª—è FloatVectorProperty
                 value_to_set = tuple(current_socket_val)
            elif expected_node_prop_type == 'BOOLEAN':
                 # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ bool –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                 value_to_set = bool(current_socket_val)

            # logger.debug(f"socket_value_update: Setting node '{self.node.name}' property '{prop_name_val}' to {value_to_set} (type: {type(value_to_set)})")
            setattr(self.node, prop_name_val, value_to_set) # <-- –ó–ê–ü–ò–°–¨ –í –°–í–û–ô–°–¢–í–û –ù–û–î–´ (—Ç–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º)
            
        except Exception as e:
            logger.error(f"Failed to set node property '{prop_name_val}' from socket '{self.name}': {e}", exc_info=True)

    # --- –¢—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–¥—ã ---
    if hasattr(self.node, 'process_node') and callable(self.node.process_node):
        self.node.process_node(context)
    # -------------------------------

# --- Base Socket Class ---
class CadQuerySocketBase(NodeSocket):
    """Base class for sockets in the CadQuery Parametric Addon."""
    bl_idname_prefix = "CQP_" # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

    # --- ID Management (similar to Sverchok) ---
    s_id: StringProperty(options={'SKIP_SAVE'})

    prop_name: StringProperty(
        name="Node Property Name",
        description="Name of the node's property linked to this socket's default value UI",
        default=""
    )

    @property
    def socket_id(self):
        """Unique identifier for the socket instance."""
        if not self.s_id:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –Ω–æ–¥—ã, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–∫–µ—Ç–∞ –∏ —Ç–∏–ø–∞ (in/out)
            node_id = getattr(self.node, 'node_id', str(hash(self.node))) # –ù—É–∂–µ–Ω node_id –≤ –±–∞–∑–æ–≤–æ–π –Ω–æ–¥–µ
            self.s_id = str(hash(node_id + self.identifier + ('o' if self.is_output else 'i')))
        return self.s_id

    # --- Data Handling (–í–µ—Ä—Å–∏—è, –æ–ø–∏—Ä–∞—é—â–∞—è—Å—è –Ω–∞ default_property —Å–æ–∫–µ—Ç–∞) ---
    def sv_get(self, default=None):
        """Get data from the cache or the socket's default_property or the provided default."""
        if self.is_output:
            raise RuntimeError(f"Cannot get data from output socket: {self.name}")

        if self.is_linked:
            # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞ ---
            from .exceptions import NoDataError
            try:
                link = self.links[0]
                from_socket = link.from_socket
                return sv_get_socket(from_socket.socket_id, self.node, self)
            except KeyError: raise NoDataError(self.node, self)
            except IndexError: raise NoDataError(self.node, self)
        else:
            # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ default_property –°–û–ö–ï–¢–ê ---
            if hasattr(self, 'default_property') and self.default_property is not None:
                # logger.debug(f"Socket '{self.name}' in node '{self.node.name}' using its own default_property.")
                prop = self.default_property
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∏–ø—ã Python, –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ bpy
                if isinstance(prop, (bpy.types.bpy_prop_array, tuple, list)):
                    return tuple(prop)
                return prop
            # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ default –ê–†–ì–£–ú–ï–ù–¢–ê ---
            elif default is not None:
                # logger.debug(f"Socket '{self.name}' in node '{self.node.name}' using provided default value: {default}")
                return default
            # --- –ù–∏—á–µ–≥–æ –Ω–µ—Ç ---
            else:
                # logger.debug(f"Socket '{self.name}' in node '{self.node.name}' has no connection, no default_property, and no default provided.")
                from .exceptions import NoDataError
                raise NoDataError(self.node, self)


    def sv_set(self, data):
        """Set data into the cache for this socket."""
        if not self.is_output:
            raise RuntimeError(f"Cannot set data to input socket: {self.name}")
        sv_set_socket(self.socket_id, data)

    def sv_forget(self):
        """Remove data from the cache for this socket."""
        sv_forget_socket(self.socket_id)

    # --- UI Drawing (–†–∏—Å—É–µ–º default_property —Å–æ–∫–µ—Ç–∞, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω) ---
    def draw(self, context, layout, node, text):
        """Draw the socket UI."""
        if self.is_output or self.is_linked:
            layout.label(text=text)
        # --- –†–∏—Å—É–µ–º default_property –°–û–ö–ï–¢–ê, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å ---
        elif hasattr(self, 'default_property'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞ 'default_property' —Å–∞–º–æ–≥–æ —Å–æ–∫–µ—Ç–∞
            # text=text –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–º—è —Å–æ–∫–µ—Ç–∞ –∫–∞–∫ –º–µ—Ç–∫—É –ø–æ–ª—è –≤–≤–æ–¥–∞
            layout.prop(self, "default_property", text=text)
        # ----------------------------------------------------
        else:
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            layout.label(text=text)

    # --- –¶–≤–µ—Ç —Å–æ–∫–µ—Ç–∞ ---
    def draw_color(self, context, node):
        """Return the color of the socket."""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É—Å—Ç–∞—Ä–µ–ª –≤ 4.0+, –∏—Å–ø–æ–ª—å–∑—É–µ–º draw_color_simple
        return self.draw_color_simple() # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏?

    @classmethod
    def draw_color_simple(cls):
        """Return the color of the socket type."""
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö
        return (0.6, 0.6, 0.6, 1.0) # –°–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# --- Specific Socket Types (–î–æ–±–∞–≤–ª—è–µ–º update=socket_value_update) ---

class CQObjectSocket(CadQuerySocketBase):
    """Socket for passing CadQuery Workplane or Shape objects."""
    bl_idname = "CQP_ObjectSocket"
    bl_label = "CQ Object"
    # –ù–µ—Ç default_property –¥–ª—è UI

    @classmethod
    def draw_color_simple(cls):
        return (0.1, 0.4, 0.8, 1.0) # –°–∏–Ω–∏–π

class CQNumberSocket(CadQuerySocketBase):
    """Socket for passing numerical values (float or int)."""
    bl_idname = "CQP_NumberSocket"
    bl_label = "Number"

    default_property: FloatProperty(
        name="Value", description="Default value if socket is not connected",
        default=1.0, # –°—Ç–∞–≤–∏–º 0.0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–∫–µ—Ç–∞
        update=socket_value_update # <--- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–±—ç–∫
    )

    @classmethod
    def draw_color_simple(cls):
        return (0.6, 1.0, 0.6, 1.0) # –ó–µ–ª–µ–Ω—ã–π
    
# --- –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π —Å–æ–∫–µ—Ç (–ù–û–í–´–ô) ---
class CQIntSocket(CadQuerySocketBase):
    """Socket for passing integer values."""
    bl_idname = "CQP_IntSocket"
    bl_label = "Integer"

    default_property: IntProperty( 
        name="Value", description="Default value if socket is not connected",
        default=1, 
        update=socket_value_update
    )

    @classmethod
    def draw_color_simple(cls):
        return (0.4, 0.8, 0.9, 1.0) # –ì–æ–ª—É–±–æ–π (–¥–ª—è –æ—Ç–ª–∏—á–∏—è)
    
class CQVectorSocket(CadQuerySocketBase):
    """Socket for passing 3D vectors (tuples of 3 floats)."""
    bl_idname = "CQP_VectorSocket"
    bl_label = "Vector"

    default_property: FloatVectorProperty(
        name="Vector", description="Default vector if socket is not connected",
        default=(0.0, 0.0, 0.0), size=3, subtype='XYZ',
        update=socket_value_update # <--- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–±—ç–∫
    )

    @classmethod
    def draw_color_simple(cls):
        return (0.9, 0.6, 0.2, 1.0) # –û—Ä–∞–Ω–∂–µ–≤—ã–π

class CQSelectorSocket(CadQuerySocketBase):
    """Socket for passing element selection data (type and index/indices)."""
    bl_idname = "CQP_SelectorSocket"
    bl_label = "CQ Selector"
    # –ù–µ—Ç default_property –¥–ª—è UI

    @classmethod
    def draw_color_simple(cls):
        return (1.0, 0.5, 0.8, 1.0) # –†–æ–∑–æ–≤—ã–π
    
class CQBooleanSocket(CadQuerySocketBase):
    """Socket for passing boolean values."""
    bl_idname = "CQP_BooleanSocket"
    bl_label = "Boolean"

    default_property: BoolProperty(
        name="Boolean", description="Default value if socket is not connected",
        default=False,
        update=socket_value_update # <--- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–±—ç–∫
    )

    @classmethod
    def draw_color_simple(cls):
        return (1.0, 0.4, 0.4, 1.0) # –ö—Ä–∞—Å–Ω—ã–π

# --- Registration ---
# –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ
classes = (
    CQObjectSocket,
    CQNumberSocket,
    CQIntSocket,
    CQVectorSocket,
    CQBooleanSocket,
    CQSelectorSocket,
)

# –§—É–Ω–∫—Ü–∏–∏ register/unregister –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def register():
    from bpy.utils import register_class
    for cls in classes:
        register_class(cls)

def unregister():
    from bpy.utils import unregister_class
    for cls in reversed(classes):
        try:
            unregister_class(cls)
        except RuntimeError:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π print, –µ—Å–ª–∏ logger –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –¥–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            print(f"Warning: Failed to unregister socket class: {cls.__name__}")